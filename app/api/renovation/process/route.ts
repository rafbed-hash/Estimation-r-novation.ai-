import { NextRequest, NextResponse } from 'next/server'
import { GoogleAIStudioService } from '@/lib/services/google-ai-studio'
import { OpenAICostEstimationService } from '@/lib/services/openai-cost-estimation'

export async function POST(request: NextRequest) {
  try {
    console.log('üöÄ API /renovation/process called')
    const body = await request.json()
    console.log('üì¶ Body received - client:', body.client?.name, 'house:', body.house?.surface, 'photos:', body.project?.photos?.length)
    
    // Validation des donn√©es re√ßues
    if (!body.client || !body.house || !body.project) {
      console.log('‚ùå Missing data in request')
      return NextResponse.json(
        { error: 'Donn√©es manquantes dans la requ√™te' },
        { status: 400 }
      )
    }

    console.log('‚úÖ Data validation passed')

    // Initialisation des services avec Google AI Studio (Gemini)
    const googleAIKey = process.env.GOOGLE_AI_API_KEY
    const openAIKey = process.env.OPENAI_API_KEY

    console.log('üîë API Keys check:')
    console.log('- Google AI Studio:', !!googleAIKey)
    console.log('- OpenAI:', !!openAIKey)

    // Pour le d√©veloppement, utiliser des r√©sultats simul√©s si pas de cl√© API
    if (!googleAIKey) {
      console.log('‚ö†Ô∏è Missing Google AI API key - using fallback results')
    }

    if (!openAIKey) {
      console.log('‚ö†Ô∏è Missing OpenAI key - will use fallback cost estimation')
    }

    const googleAI = googleAIKey ? new GoogleAIStudioService(googleAIKey) : null
    const openAI = openAIKey ? new OpenAICostEstimationService(openAIKey) : null

    // √âtape 1: Transformation d'images avec Google AI Studio (Gemini)
    console.log('ü§ñ Calling Google AI Studio for image transformation...')
    console.log('üîë Google AI Key available:', !!googleAIKey)
    console.log('üì∏ Photos received:', body.project.photos?.length || 0)
    console.log('üé® Selected style:', body.project.selectedStyle)
    console.log('üè† Selected rooms:', body.project.selectedRooms)
    
    let aiResults
    try {
      // Utiliser Nano Banana (Gemini 2.5 Flash) pour analyser et transformer les images
      const mainPhoto = body.project.photos?.[0]
      
      if (!mainPhoto) {
        throw new Error('Aucune photo fournie pour la transformation')
      }
      
      console.log('ü§ñ Analyzing image with Google AI Studio (Gemini)...')
      
      // R√©cup√©rer les dimensions de la premi√®re pi√®ce s√©lectionn√©e
      const firstRoom = body.project.selectedRooms[0] || 'salle-de-bain'
      
      console.log('üìè Room type:', firstRoom)
      
      let transformationResult
      
      if (googleAI) {
        transformationResult = await googleAI.transformImage({
          originalPhoto: mainPhoto,
          roomType: firstRoom,
          selectedStyle: body.project.selectedStyle,
          customPrompt: body.project.customPrompt,
          inspirationPhoto: body.project.inspirationPhoto
        })
        
        console.log('‚úÖ Google AI analysis completed')
        console.log('üìä Analysis confidence:', transformationResult.confidence)
        console.log('üìù Analysis description:', transformationResult.description.substring(0, 100) + '...')
      } else {
        // R√©sultats simul√©s si pas de cl√© API
        transformationResult = {
          originalPhoto: mainPhoto,
          transformedPhoto: mainPhoto,
          description: 'Analyse simul√©e - Veuillez configurer votre cl√© API Google AI Studio pour une analyse compl√®te.',
          confidence: 75,
          processingTime: 1000
        }
        console.log('‚ö†Ô∏è Using simulated results - no API key configured')
      }
      
      aiResults = {
        originalPhotos: [mainPhoto],
        transformedPhotos: [{
          id: '1',
          url: transformationResult.transformedPhoto,
          description: transformationResult.description,
          confidence: transformationResult.confidence
        }],
        confidence: transformationResult.confidence,
        processingTime: transformationResult.processingTime,
        model: 'gemini-2.5-flash',
        prompt: `Analyse ${body.project.selectedStyle} pour ${body.project.selectedRooms.join(', ')}`
      }
      
    } catch (error) {
      console.error('‚ùå Nano Banana failed, using fallback:', error)
      
      // Log specific error details for debugging
      if (error instanceof Error) {
        console.error('‚ùå Error message:', error.message)
        if (error.message.includes('base64')) {
          console.error('üîç Photo format issue detected - photos may not be properly converted to base64')
        }
      }
      
      // Utiliser des r√©sultats de fallback avec analyse basique
      const mainPhoto = body.project.photos?.[0]
      aiResults = {
        originalPhotos: [mainPhoto || ''],
        transformedPhotos: [{
          id: '1',
          url: mainPhoto || '/placeholder-image.svg',
          description: `Analyse de style ${body.project.selectedStyle} - Service temporairement indisponible. Votre photo sera analys√©e d√®s que le service sera r√©tabli.`,
          confidence: 70
        }],
        confidence: 70,
        processingTime: 1000,
        model: 'nano-banana-fallback',
        prompt: `Analyse ${body.project.selectedStyle} pour ${body.project.selectedRooms.join(', ')}`
      }
      
      console.log('‚ö†Ô∏è Using Nano Banana fallback results')
    }
    
    // Si tout √©choue, utiliser des r√©sultats simul√©s
    if (!aiResults) {
      console.log('‚ö†Ô∏è Using simulated results as final fallback')
      aiResults = {
        originalPhotos: body.project.photos || [],
        transformedPhotos: [
          { id: '1', url: body.project.photos?.[0] || '/placeholder-image.svg', description: 'Transformation simul√©e - Service temporairement indisponible', confidence: 75 }
        ],
        confidence: 75,
        processingTime: 1500,
        model: 'simulation-fallback',
        prompt: `Transformation ${body.project.selectedStyle} pour ${body.project.selectedRooms.join(', ')}`
      }
    }

    // √âtape 2: Estimation des co√ªts avec OpenAI
    console.log('ü§ñ Calling OpenAI for cost estimation...')
    console.log('üîë OpenAI Key available:', !!openAIKey)
    
    let costEstimation
    try {
      if (openAI) {
        costEstimation = await openAI.estimateCosts({
          client: body.client,
          house: body.house,
          selectedRooms: body.project.selectedRooms,
          selectedStyle: body.project.selectedStyle,
          aiAnalysis: JSON.stringify(aiResults)
        })
        console.log('‚úÖ OpenAI cost estimation completed:', costEstimation.totalCost)
      } else {
        throw new Error('OpenAI service not available')
      }
    } catch (error) {
      console.error('‚ùå OpenAI failed, using fallback:', error)
      // Fallback pour l'estimation des co√ªts
      costEstimation = {
        totalCost: {
          min: 15000,
          max: 35000,
          average: 25000
        },
        breakdown: [
          { category: 'Mat√©riaux', cost: 12000, description: 'Rev√™tements, peinture, accessoires' },
          { category: 'Main-d\'≈ìuvre', cost: 8000, description: 'Installation et finitions' },
          { category: 'Design', cost: 3000, description: 'Conception et plans' },
          { category: 'Impr√©vus', cost: 2000, description: 'Marge de s√©curit√© (8%)' }
        ],
        timeline: '4-6 semaines',
        recommendations: [
          'Planifiez les travaux hors saison hivernale',
          'Demandez plusieurs devis pour comparer',
          'Pr√©voyez 10-15% de budget suppl√©mentaire'
        ]
      }
    }

    console.log('‚úÖ All processing completed')

    // Retourner les r√©sultats
    return NextResponse.json({
      success: true,
      data: {
        aiResults,
        costEstimation,
        makeWebhookSent: false,
        makeWebhookMessage: 'Processing completed'
      }
    })

  } catch (error) {
    console.error('‚ùå Erreur dans l\'API renovation/process:', error)
    console.error('‚ùå Stack trace:', error instanceof Error ? error.stack : 'No stack trace')
    console.error('‚ùå Error type:', typeof error)
    console.error('‚ùå Error constructor:', error?.constructor?.name)
    
    return NextResponse.json(
      { 
        error: 'Erreur interne du serveur',
        details: error instanceof Error ? error.message : 'Unknown error',
        type: typeof error,
        stack: error instanceof Error ? error.stack : undefined
      },
      { status: 500 }
    )
  }
}
