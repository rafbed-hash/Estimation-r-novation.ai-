// Service pour l'estimation des co√ªts de r√©novation avec OpenAI

interface CostEstimationRequest {
  client: {
    firstName: string
    lastName: string
    city: string
    postalCode: string
  }
  house: {
    propertyType: string
    constructionYear: string
    surface: string
    rooms: string
  }
  selectedRooms: string[]
  selectedStyle: string
  aiAnalysis?: string // R√©sultat de l'analyse Google AI
}

interface CostBreakdown {
  category: string
  cost: number
  percentage: number
  details?: string[]
}

interface CostEstimationResponse {
  totalCost: {
    min: number
    max: number
    average: number
  }
  breakdown: CostBreakdown[]
  timeline: string
  confidence: string
  factors: string[]
  recommendations: string[]
}

class OpenAICostEstimationService {
  private apiKey: string
  private model: string

  constructor(apiKey: string) {
    this.apiKey = apiKey
    this.model = 'gpt-4-turbo-preview' // Mod√®le le plus r√©cent pour l'analyse
  }

  async estimateCosts(request: CostEstimationRequest): Promise<CostEstimationResponse> {
    try {
      console.log('ü§ñ OpenAI: D√©but de l\'estimation des co√ªts avec la cl√©:', this.apiKey.substring(0, 20) + '...')
      const prompt = this.buildCostEstimationPrompt(request)

      const response = await fetch('https://api.openai.com/v1/chat/completions', {
        method: 'POST',
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          model: this.model,
          messages: [
            {
              role: 'system',
              content: `Tu es un expert en r√©novation et estimation de co√ªts en France. 
              Tu as acc√®s √† une base de donn√©es de plus de 10,000 projets de r√©novation r√©cents.
              Tes estimations sont pr√©cises et bas√©es sur les prix du march√© fran√ßais 2024.
              Tu dois retourner une estimation structur√©e en JSON.`
            },
            {
              role: 'user',
              content: prompt
            }
          ],
          temperature: 0.3, // Faible temp√©rature pour plus de pr√©cision
          max_tokens: 2000,
          response_format: { type: "json_object" }
        })
      })

      if (!response.ok) {
        throw new Error(`Erreur API OpenAI: ${response.status}`)
      }

      const result = await response.json()
      console.log('‚úÖ OpenAI: R√©ponse re√ßue avec succ√®s')
      const estimation = JSON.parse(result.choices[0].message.content)

      return this.validateAndFormatEstimation(estimation)

    } catch (error) {
      console.error('Erreur lors de l\'estimation des co√ªts:', error)
      // Retourner une estimation de fallback
      return this.getFallbackEstimation(request)
    }
  }

  private buildCostEstimationPrompt(request: CostEstimationRequest): string {
    const roomsText = request.selectedRooms.join(', ')
    const surfacePerRoom = Math.floor(parseInt(request.house.surface) / parseInt(request.house.rooms))

    return `
Estime le co√ªt de r√©novation pour ce projet au Canada (2024):

PROPRI√âT√â:
- Type: ${request.house.propertyType}
- Ann√©e construction: ${request.house.constructionYear}
- Surface totale: ${request.house.surface} pi¬≤ (pieds carr√©s)
- Localisation: ${request.client.city} (${request.client.postalCode})

PROJET:
- Pi√®ces √† r√©nover: ${roomsText}
- Style choisi: ${request.selectedStyle}
- Surface estim√©e par pi√®ce: ~${surfacePerRoom} pi¬≤

INSTRUCTIONS:
1. Calcule les co√ªts en dollars canadiens (CAD $) pour 2024
2. Utilise les prix du march√© canadien (plus √©lev√©s qu'aux √âtats-Unis)
3. Base tes calculs sur les pieds carr√©s (pi¬≤), pas les m√®tres carr√©s
4. Consid√®re la localisation canadienne pour ajuster les prix
5. Adapte selon l'√¢ge du b√¢timent et le style choisi
6. Inclus tous les postes: mat√©riaux, main-d'≈ìuvre, design, impr√©vus, taxes (TPS/TVQ si Qu√©bec)
7. Utilise les co√ªts moyens canadiens: $150-300 CAD par pi¬≤ selon la complexit√©

Retourne un JSON avec cette structure exacte:
{
  "totalCost": {
    "min": number,
    "max": number,
    "average": number
  },
  "breakdown": [
    {
      "category": "Mat√©riaux",
      "cost": number,
      "percentage": number,
      "details": ["d√©tail1", "d√©tail2"]
    },
    {
      "category": "Main-d'≈ìuvre",
      "cost": number,
      "percentage": number,
      "details": ["d√©tail1", "d√©tail2"]
    },
    {
      "category": "Design et planification",
      "cost": number,
      "percentage": number,
      "details": ["d√©tail1", "d√©tail2"]
    },
    {
      "category": "Impr√©vus et divers",
      "cost": number,
      "percentage": number,
      "details": ["d√©tail1", "d√©tail2"]
    }
  ],
  "timeline": "X-Y semaines",
  "confidence": "√âlev√©e/Moyenne/Faible (raison)",
  "factors": ["facteur1", "facteur2", "facteur3"],
  "recommendations": ["recommandation1", "recommandation2"]
}
`
  }

  private validateAndFormatEstimation(estimation: any): CostEstimationResponse {
    // Validation et formatage des donn√©es re√ßues d'OpenAI
    const validated: CostEstimationResponse = {
      totalCost: {
        min: Math.round(estimation.totalCost?.min || 10000),
        max: Math.round(estimation.totalCost?.max || 30000),
        average: Math.round(estimation.totalCost?.average || 20000)
      },
      breakdown: estimation.breakdown?.map((item: any) => ({
        category: item.category || 'Non sp√©cifi√©',
        cost: Math.round(item.cost || 0),
        percentage: Math.round(item.percentage || 0),
        details: item.details || []
      })) || [],
      timeline: estimation.timeline || '4-8 semaines',
      confidence: estimation.confidence || 'Moyenne',
      factors: estimation.factors || [],
      recommendations: estimation.recommendations || []
    }

    // V√©rifier que les pourcentages totalisent 100%
    const totalPercentage = validated.breakdown.reduce((sum, item) => sum + item.percentage, 0)
    if (Math.abs(totalPercentage - 100) > 5) {
      // Ajuster proportionnellement si n√©cessaire
      const factor = 100 / totalPercentage
      validated.breakdown.forEach(item => {
        item.percentage = Math.round(item.percentage * factor)
      })
    }

    return validated
  }

  private getFallbackEstimation(request: CostEstimationRequest): CostEstimationResponse {
    // Estimation de base en cas d'erreur API - Prix canadiens 2024
    const baseRoomCosts: Record<string, number> = {
      'cuisine': 25000,           // Cuisine compl√®te au Canada
      'salle-de-bain': 18000,     // Salle de bain compl√®te
      'salon': 12000,             // Salon/s√©jour
      'chambre': 8000,            // Chambre
      'bureau': 7000,             // Bureau/√©tude
      'entree': 4000,             // Entr√©e/hall
      'salle-a-manger': 10000,    // Salle √† manger
      'garage': 6000              // Garage
    }

    const totalRoomCost = request.selectedRooms.reduce((sum, room) => {
      return sum + (baseRoomCosts[room] || 5000)
    }, 0)

    const styleMultiplier = this.getStyleMultiplier(request.selectedStyle)
    const average = Math.round(totalRoomCost * styleMultiplier)

    return {
      totalCost: {
        min: Math.round(average * 0.8),
        max: Math.round(average * 1.3),
        average
      },
      breakdown: [
        { category: 'Mat√©riaux', cost: Math.round(average * 0.4), percentage: 40 },
        { category: 'Main-d\'≈ìuvre', cost: Math.round(average * 0.45), percentage: 45 },
        { category: 'Design et planification', cost: Math.round(average * 0.1), percentage: 10 },
        { category: 'Impr√©vus (5%)', cost: Math.round(average * 0.05), percentage: 5 }
      ],
      timeline: '4-6 semaines',
      confidence: 'Moyenne (estimation automatique)',
      factors: ['Surface des pi√®ces', 'Style choisi', '√Çge du b√¢timent'],
      recommendations: ['Demander plusieurs devis', 'Pr√©voir une marge pour les impr√©vus']
    }
  }

  private getStyleMultiplier(style: string): number {
    const multipliers: Record<string, number> = {
      'moderne': 1.2,
      'classique': 1.4,
      'industriel': 1.1,
      'scandinave': 1.0,
      'campagne': 0.9,
      'spa': 1.3,
      'custom': 1.1
    }

    return multipliers[style] || 1.0
  }

  // M√©thode pour valider la cl√© API
  async validateApiKey(): Promise<boolean> {
    try {
      const response = await fetch('https://api.openai.com/v1/models', {
        headers: {
          'Authorization': `Bearer ${this.apiKey}`,
        }
      })
      return response.ok
    } catch {
      return false
    }
  }
}

export { OpenAICostEstimationService }
export type { CostEstimationRequest, CostEstimationResponse, CostBreakdown }
